#!/bin/bash
#
# elasticsearch <summary>
#
# chkconfig:   2345 80 20
# description: Starts and stops a single elasticsearch instance on this system
#

### BEGIN INIT INFO
# Provides: Elasticsearch
# Required-Start: $network $named
# Required-Stop: $network $named
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: This service manages the elasticsearch daemon
# Description: Elasticsearch is a very scalable, schema-free and high-performance search solution supporting multi-tenancy and near realtime search.
### END INIT INFO

#
# init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
    . /etc/rc.status
    rc_reset
fi

#
# Source function library.
#
if [ -f /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
fi

# Sets the default values for elasticsearch variables used in this script
set_puppet_variables() {
  ES_USER="nate"
  ES_GROUP="nate"
  ES_HOME="/home/nate/test/puppet1/elasticsearch-5.6.12"
  MAX_OPEN_FILES=65536
  MAX_MAP_COUNT=262144
  LOG_DIR="/home/nate/test/puppet1/elasticsearch-5.6.12/logs"
  DATA_DIR="/home/nate/test/puppet1/elasticsearch-5.6.12/data"
  CONF_DIR="/home/nate/test/puppet1/elasticsearch-5.6.12/config"
  PID_DIR="/home/nate/test/puppet1/elasticsearch-5.6.12/var"
}
#:#master
set_master_variables(){
  ES_USER="nate"
  ES_GROUP="nate"
  ES_HOME="/home/nate/test/elasticsearch-5.6.12"
  MAX_OPEN_FILES=65536
  MAX_MAP_COUNT=262144
  LOG_DIR="/var/log/elasticsearch"
  DATA_DIR="/var/lib/elasticsearch"
  CONF_DIR="/home/nate/test/elasticsearch-5.6.12/config"
  PID_DIR="/var/run/elasticsearch"
}

check_ES_reqs() {
    ES_ENV_FILE="/etc/sysconfig/elasticsearch"
    if [ -f "$ES_ENV_FILE" ]; then . "$ES_ENV_FILE"
    fi
    if [ "$ES_USER" != "elasticsearch" ] || [ "$ES_GROUP" != "elasticsearch" ]; then
        echo "WARNING: the writer of this script is too good "
    fi
    if [ ! -z "$CONF_FILE" ]; then
        echo "CONF_FILE setting is no longer supported. elasticsearch.yml must be placed in the config directory and cannot be renamed."
        exit 1
    fi
    exec="$ES_HOME/bin/elasticsearch"
    prog="elasticsearch"
    pidfile="$PID_DIR/${prog}.pid"
    export ES_JAVA_OPTS
    export JAVA_HOME
    export ES_INCLUDE
    export ES_JVM_OPTIONS
    export ES_STARTUP_SLEEP_TIME
    if test -n "$ES_MIN_MEM"; then export ES_MIN_MEM; fi
    if test -n "$ES_MAX_MEM"; then export ES_MAX_MEM; fi
    if test -n "$ES_HEAP_SIZE"; then export ES_HEAP_SIZE; fi
    if test -n "$ES_HEAP_NEWSIZE"; then export ES_HEAP_NEWSIZE; fi
    if test -n "$ES_DIRECT_SIZE"; then export ES_DIRECT_SIZE; fi
    if test -n "$ES_USE_IPV4"; then export ES_USE_IPV4; fi
    if test -n "$ES_GC_OPTS"; then export ES_GC_OPTS; fi
    if test -n "$ES_GC_LOG_FILE"; then export ES_GC_LOG_FILE; fi
    lockfile=/var/lock/subsys/$prog
    if [ -n $USER ] && [ -z $ES_USER ] ; then
       ES_USER=$USER
    fi
    if [ ! -x "$exec" ]; then
       echo "The elasticsearch startup script does not exists or it is not executable, tried: $exec"
       exit 1
    fi
}

checkJava() {
    if [ -x "$JAVA_HOME/bin/java" ]; then
       JAVA="$JAVA_HOME/bin/java"
    else
       JAVA=`which java`
    fi
    if [ ! -x "$JAVA" ]; then
        echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
        exit 1
    fi
}

start() {
    checkJava
    [ -x $exec ] || exit 5
    if [ -n "$MAX_OPEN_FILES" ]; then
        ulimit -n $MAX_OPEN_FILES
    fi
    if [ -n "$MAX_LOCKED_MEMORY" ]; then
        ulimit -l $MAX_LOCKED_MEMORY
    fi
    if [ -n "$MAX_MAP_COUNT" -a -f /proc/sys/vm/max_map_count ]; then
         sysctl -q -w vm.max_map_count=$MAX_MAP_COUNT
    fi
    if [ -n "$PID_DIR" ] && [ ! -e "$PID_DIR" ]; then
         mkdir -p "$PID_DIR" && chown "$ES_USER":"$ES_GROUP" "$PID_DIR"
    fi
    if [ -n "$pidfile" ] && [ ! -e "$pidfile" ]; then
         touch "$pidfile" && chown "$ES_USER":"$ES_GROUP" "$pidfile"
    fi
    cd $ES_HOME
    echo -n $"Starting $prog: "
    daemon --user $ES_USER --pidfile $pidfile $exec -p $pidfile -d -Edefault.path.logs=$LOG_DIR -Edefault.path.data=$DATA_DIR -Edefault.path.conf=$CONF_DIR
    retval=$?
    echo [ $retval -eq 0 ] && touch $lockfile
return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    # stop it here, often "killproc $prog"
    killproc -p $pidfile -d 86400 $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
     stop
     start
}

reload() {
    restart
}

force_reload() {
     restart
}

rh_status() {
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}
removes_bad_nodes(){
    for item1 in "${entered_args[@]}"; do
        for item2 in "${list_nodes[@]}"; do
            [[ $item1 == "$item2" ]] && continue 2
        done
    not_in_list+=( "$item1" )
    done
}
keep_good_inputs(){
    for item1 in "${list_nodes[@]}"; do
        for item2 in "${entered_args[@]}"; do
            if [[ $item1 == "$item2" ]]; then
                intersections+=( "$item1" )
                break
            fi
       done
   done
}

action=$1

list_nodes=(  "master" "puppet" )
entered_args=( $@ )

if [[ $# -eq 1 ]] ; then
    set -- master puppet
elif [[ $# -ge 2 ]] ; then
    not_in_list=()
    removes_bad_nodes
        if [[ ${#not_in_list[@]} -ge 2 ]]; then
            echo "these are not nodes ${not_in_list[@]:1} please try master or puppet"
        fi
   intersections=()
   keep_good_inputs
   valid_nodes=${intersections[@]}
   set -- $valid_nodes
fi

for node; do
    set_"$node"_variables
    check_ES_reqs

        case "$action" in
             start)
                 start
                 ;;
             stop)
                 stop
                 ;;
             restart)
                restart
                ;;
            status)
                rh_status
                ;;
      esac

done
exit $?